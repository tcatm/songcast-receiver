# Features
- [X] query preset
- [X] either play by URI (both OHZ and OHU/OHM)
- [X] adjust latency correctly
- [X] detect samplerate/format changes and re-open pulseaudio stream appropiately
- [X] finish preset parsing
- [X] OHU forwarding
- [X] handle out of order packets (epoll might help). Use a heap to store frames when previous frames are missing.
- [X] implement resend request
- [X] build code for managing missed frames. sorted list of integers?
- [X] port to async API
- [X] PA_STREAM_ADJUST_LATENCY
- [X] merge preset and ohz resolve code. add a statemachine. have preset, want ohz, have ohz, want ohm...
- [X] handle 100ms timeouts for preset/ohz query
- [X] closing ohm needs to: stop the player, close ohm socket
- [X] if ohz: continually listen for matching zone uri messages and switch if changed
- [X] actually close sockets! (ohz)
- [X] ohm send event could share code with ohm_send_resend_request
- [X] init/destroy for player.c (also to handle null uri)
- [X] handle OHM null URL. could be tested with rebooted DSM. it should send null URL first, then transition to real URI later
- [X] The time when the **previous** frame was sent over the network (if the timestamped flag is on)
- [X] remove global G
- [X] struct for request and underflow cb
- [X] command line interface (preset, uri, stop, quit)
- [X] fix handling of stopping stream. make it more robust. can the state cb be used?
      trigger with BUFFER_LATENCY = 3e3 or lower
      maybe unref stream in main thread?
- [X] use network timestamps if present, probably during parsing?
- [X] remote clock may be unstable initially!
- [ ] can I put all relevant stream data into the userdata? i.e. associate a cache/pipeline with the stream?
- [ ] seperate stream tracking (clock, format changes, cache, ...) from playback (play_audio, underflow, ...)
      there could a be a stream with an associated cache and remote_clock
      streams are played in a queue
- [ ] make robust again
- [ ] lowpass on delta. how to lowpass with no fixed sample rate?
- [ ] use lowpass delta to adjust samplerate ever so slightly
- [ ] wtf is now happening on underflows? dump cache! what else is happening to the audio buffer?
- [ ] optimize play_audio function as much as possible
- [ ] search for audio from end of cache? (format change)
- [ ] a periodic timer may be useful to handle HALTs when no data is coming in
- [ ] make output.c robust against all kinds of pulseaudio fuckups
- [ ] tear down of stream could happen in try_prepare or player_stop
      which events are used?
      - write_data
      - underflow
- [ ] make cache a little more opaque?
- [ ] what is the data flow for cache? what does the mutex prevent?
      need at least a mutex for the cache
      need another one for state
- [ ] decouple output from player using opaque pointer
- [ ] under what conditions should the cache be removed?
- [ ] get rid of int64_t wherever possible
- [ ] do not use pa_usec_t in player or cache
- [ ] network timestamp may not be accurate until MediaLatency after clock family change
- [ ] send join until audio data, track or metatext is received every 100ms
- [ ] clean shutdown on ctrl-c, send leave message
- [ ] check whether destination multicast group matches
- [ ] move data used by write_data thread into it's own struct
- [ ] clearly mark data that is accessed from the playback thread (e.g. separate struct)
- [ ] can CACHE_SIZE be reduced?
- [ ] use monotonic clock
- [ ] resampling should be optional
- [ ] display codec name
- [ ] display track and metadata
- [ ] set pulseaudio input name to something meaningful
- [ ] tolerate some amount of out-of-order frames? i.e. wait a few frames before sending resend requests?
- [ ] read complete source, read all comments, cleanup
- [ ] if buffer runs down to 20ms, fade off?
- [ ] fade in once buffer is 100% filled again
- [ ] when changing PA sinks, invalidate audio_local_ratio!
- [ ] implement volume control
- [ ] implement just enough of openhome to allow grouping in kazoo. this could happen outside of the c code by controlling using stdio
